networks:
  mofumofu-network:
    driver: bridge

services:
  mofumofu-backend:
    build: .
    container_name: mofumofu-backend
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - docker.env
    ports:
      - "8000:8000"
    networks:
      - mofumofu-network
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      markdown-service:
        condition: service_healthy

  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: meilisearch
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - docker.env
    ports:
      - "7700:7700"
    networks:
      - mofumofu-network
    volumes:
      - meili_data:/meili_data

  # 통합 Redis (백엔드 캐시 + Celery 브로커)
  redis:
    image: redis:8.0.2
    container_name: redis
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mofumofu-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI 태스크 서버
  tasks-api:
    build:
      context: tasks
      dockerfile: Dockerfile
    container_name: tasks-api
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "7000:7000"
    env_file:
      - docker.env
    networks:
      - mofumofu-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: tasks
      dockerfile: Dockerfile
    command: ["uv", "run", "python", "start_worker.py"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - docker.env
    networks:
      - mofumofu-network
    depends_on:
      redis:
        condition: service_healthy
      tasks-api:
        condition: service_started
    restart: unless-stopped
    deploy:
      replicas: 2

  # Celery Beat (스케줄러)
  celery-beat:
    build:
      context: tasks
      dockerfile: Dockerfile
    container_name: celery-beat
    command: ["uv", "run", "celery", "-A", "app.core.celery_app", "beat", "--loglevel=info"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - docker.env
    networks:
      - mofumofu-network
    depends_on:
      redis:
        condition: service_healthy
      tasks-api:
        condition: service_started
    restart: unless-stopped

  # Celery Flower (모니터링)
  flower:
    build:
      context: tasks
      dockerfile: Dockerfile
    container_name: flower
    command: ["uv", "run", "celery", "-A", "app.core.celery_app", "--broker=redis://redis:6379/0", "flower", "--port=5555"]
    ports:
      - "5555:5555"
    env_file:
      - docker.env
    networks:
      - mofumofu-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Markdown Service (Bun + Elysia)
  markdown-service:
    build:
      context: markdown-service
      dockerfile: Dockerfile
    container_name: markdown-service
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "6700:6700"
    networks:
      - mofumofu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6700/health"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  meili_data:
  redis-data: